openapi: 3.0.1
info:
  title: golang
  description: Go runtime for building applications.
  version: "1.1"
  x-direktiv-meta:
    container: gcr.io/direktiv/functions/golang
    maintainer: "[direktiv.io](https://www.direktiv.io) "
    issues: https://github.com/direktiv-apps/golang/issues
    url: https://github.com/direktiv-apps/golang
    categories:
    - build
    license: "[Apache-2.0](https://www.apache.org/licenses/LICENSE-2.0)"
    long-description: |-
      This function has the latest version of go installed. Additionally the last 2 older versions are installed as well. The latest version can be used with just the 'go' command. Older versions need to be called explicitly with the version,  e.g. go1.17 build. This function has the following versions installed:

      - 1.19 (default)
      - 1.18 (go1.18)
      - 1.17 (go1.17)

      The base image is the official 'buster' Golang image on Docker hub.
servers:
- url: /
paths:
  /:
    post:
      parameters:
      - name: Direktiv-ActionID
        in: header
        description: "direktiv action id is an UUID. \nFor development it can be set\
          \ to 'development'\n"
        schema:
          type: string
          default: development
      - name: Direktiv-TempDir
        in: header
        description: |
          direktiv temp dir is the working directory for that request
          For development it can be set to e.g. '/tmp'
        schema:
          type: string
          default: /tmp
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                files:
                  type: array
                  description: File to create before running commands.
                  items:
                    $ref: '#/components/schemas/direktivFile'
                commands:
                  type: array
                  description: Array of commands.
                  items:
                    type: object
                    properties:
                      command:
                        type: string
                        description: Command to run
                        example: go version
                      silent:
                        type: boolean
                        description: If set to false the command will not print output
                          to logs.
                        default: false
                      print:
                        type: boolean
                        description: If set to false the command will not print the
                          full command with arguments to logs.
                        default: true
                      continue:
                        type: boolean
                        description: "Stops excecution if command fails, otherwise\
                          \ proceeds with next command"
                      envs:
                        type: array
                        description: Environment variables set for each command.
                        example:
                        - name: MYVALUE
                          value: hello
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              description: Name of the variable.
                            value:
                              type: string
                              description: Value of the variable.
        required: false
      responses:
        "200":
          description: List of executed commands.
          content:
            application/json:
              schema:
                type: object
                properties:
                  golang:
                    type: array
                    items:
                      required:
                      - result
                      - success
                      type: object
                      properties:
                        success:
                          type: boolean
                        result:
                          type: object
            golang:
              example:
              - result: go version go1.19.3 linux/amd64
                success: true
        default:
          description: generic error response
          headers:
            Direktiv-ErrorMessage:
              schema:
                type: string
            Direktiv-ErrorCode:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-direktiv-function: |-
        functions:
        - id: golang
          image: gcr.io/direktiv/functions/golang:1.1
          type: knative-workflow
      x-direktiv-examples:
      - title: Basic
        content: "- id: golang\n  type: action\n  action:\n    function: golang\n\
          \    input: \n      commands:\n      - command: go version"
      - title: Run Older Version
        content: "- id: golang\n  type: action\n  action:\n    function: golang\n\
          \    input: \n      commands:\n      - command: go1.17 version"
      x-direktiv:
        cmds:
        - action: exec
          exec: cp -Rf /root/sdk .
          print: false
          silent: true
        - action: foreach
          loop: .Commands
          exec: "{{ .Item.Command }}"
          silent: "{{ .Item.Silent }}"
          print: "{{ .Item.Print }}"
          continue: "{{ .Item.Continue }}"
          runtime-envs: |
            [
            {{- range $index, $element := .Item.Envs }}
            {{- if $index}},{{- end}}
            "{{ $element.Name }}={{ $element.Value }}"
            {{- end }}
            ]
        output: |
          {
            "golang": {{ index . 1 | toJson }}
          }
      x-direktiv-errors:
        io.direktiv.command.error: Command execution failed
        io.direktiv.output.error: Template error for output generation of the service
        io.direktiv.ri.error: Can not create information object from request
      x-codegen-request-body-name: body
components:
  schemas:
    direktivFile:
      type: object
      x-go-type:
        type: DirektivFile
        import:
          package: github.com/direktiv/apps/go/pkg/apps
    error:
      required:
      - errorCode
      - errorMessage
      type: object
      properties:
        errorCode:
          type: string
        errorMessage:
          type: string
x-original-swagger-version: "2.0"

