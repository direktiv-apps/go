swagger: "2.0"
info:
  description: Go runtime for building applications.
  title: golang
  version: "1.0"
  x-direktiv-meta:
    container: gcr.io/direktiv/functions/golang
    maintainer: |-
      [direktiv.io](https://www.direktiv.io) 
    issues: https://github.com/direktiv-apps/golang/issues
    url: https://github.com/direktiv-apps/golang  
    categories:
    - build
    license: |-
      [Apache-2.0](https://www.apache.org/licenses/LICENSE-2.0)
    long-description: >-
      This function has the latest version of go installed. Additionally the last 2 older versions are installed as well.
      The latest version can be used with just the 'go' command. Older versions need to be called explicitly with the version, 
      e.g. go1.17 build. This function has the following versions installed:


      - 1.18 (default)

      - 1.17 (go1.17)
      
      - 1.16 (go1.16)


      The base image is the official 'buster' Golang image on Docker hub.

consumes:
- application/json
produces:
- application/json
schemes:
- http
paths:
  /: 
    delete:
      parameters:
        - name: Direktiv-ActionID
          in: header
          type: string
          description: |
            On cancel Direktiv sends a DELETE request to
            the action with id in the header
      x-direktiv:
        cancel: echo 'cancel {{ .DirektivActionID }}'
      responses:
        200:
    post:
      parameters:
        - name: Direktiv-ActionID
          in: header
          type: string
          default: development
          description: |
            direktiv action id is an UUID. 
            For development it can be set to 'development'
        - name: Direktiv-TempDir
          in: header
          type: string
          default: /tmp
          description: |
            direktiv temp dir is the working directory for that request
            For development it can be set to e.g. '/tmp'
        - name: body
          in: body
          schema:
            type: object
            properties:
              files:
                type: array
                items:
                  $ref: '#/definitions/direktivFile'
                description: File to create before running commands.
              commands:
                type: array
                description: Array of commands.
                items:
                  type: object
                  properties:
                    command:
                      type: string
                      description: Command to run
                      example: go version
                    silent: 
                      type: boolean
                      description: If set to false the command will not print output to logs.
                      default: false
                    print: 
                      type: boolean
                      description: If set to false the command will not print the full command with arguments to logs.
                      default: true
                    continue: 
                      type: boolean
                      description: Stops excecution if command fails, otherwise proceeds with next command 
      # direktiv code generation is configured here
      x-direktiv-function: |-
        functions:
        - id: golang
          image: gcr.io/direktiv/functions/golang:1.0
          type: knative-workflow
      x-direktiv-examples:
        - title: Basic
          content: |-
            - id: golang
              type: action
              action:
                function: golang
                input: 
                  commands:
                  - command: go version
        - title: Run Older Version
          content: |-
            - id: golang
              type: action
              action:
                function: golang
                input: 
                  commands:
                  - command: go1.17 version
      x-direktiv:  
        cmds:
        - action: exec
          exec: cp -Rf /root/sdk .
          print: false
          silent: true
        - action: foreach
          loop: .Commands
          exec: '{{ .Item.Command }}'
          silent: '{{ .Item.Silent }}'
          print: '{{ .Item.Print }}'
          continue: '{{ .Item.Continue }}'
          # env: ["GOROOT={{ .DirektivDir }}"]
        output: |
          {
            "golang": {{ index . 1 | toJson }}
          }
      x-direktiv-errors:
        io.direktiv.command.error: Command execution failed
        io.direktiv.output.error: Template error for output generation of the service
        io.direktiv.ri.error: Can not create information object from request
      responses:
        200:
          description: List of executed commands.
          examples:
            golang:
            - result: go version go1.18.3 linux/amd64
              success: true

          schema:
            type: object
            properties:
              golang:
                type: array
                items:
                  type: object
                  required:
                  - success
                  - result
                  properties:
                    success:
                      type: boolean
                    result:
                      additionalProperties: {}
        default:
          description: generic error response
          headers:
            Direktiv-ErrorCode:
              type: string
            Direktiv-ErrorMessage:
              type: string
          schema:
            $ref: "#/definitions/error"
definitions:
  direktivFile:
    type: object
    x-go-type:
      type: DirektivFile
      import:
        package: github.com/direktiv/apps/go/pkg/apps 
  error:
    type: object
    required:
      - errorCode
      - errorMessage
    properties:
      errorCode:
        type: string
      errorMessage:
        type: string
